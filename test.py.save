"""Run tests for DCPIM utils."""

import dcpim

JSONFILE = "/tmp/" + dcpim.guid() + ".json"
json_data = {'name': "Hello world", 'results': ["test 1", "test 2", "test 3"]}

# guid
assert len(dcpim.test("guid", [])) == 16
assert len(dcpim.test("guid", [32])) == 32

# in_tag
assert dcpim.test("in_tag", [
	"<p>This is a link to <a href='http://google.com'>Google</a>.</p>",
	"a"
]) == "Google"
assert dcpim.test("in_tag", [
	"this random string is something, right?",
	"random", ","
]) == "string is something"
assert dcpim.test("in_tag", [
	"this random string is something, right?",
	"umbrella", ","
]) == ""

# save
assert not dcpim.test("save", [JSONFILE, json_data])

# load
assert dcpim.test("load", [JSONFILE]) == json_data

# unixtime
assert dcpim.test("unixtime", []) > 1

# now
assert len(dcpim.test("now", [])) == 19

# max_len
assert dcpim.test("max_len", [
	"This text is too long to fit in the max len.",
	25
]) == "This text is too long ..."

# remove_spaces
assert dcpim.test("remove_spaces", [
	"  This is  a test of   the \"emergency  broadcast system\". "
]) == "This is a test of the \"emergency broadcast system\"."

# syslog
assert dcpim.test("syslog", ["test"])

# urlencode
assert dcpim.test("urlencode", [
	"This is a % symbol!"
]) == "This+is+a+%25+symbol%21"

# is_int
assert dcpim.test("is_int", [5]) == True
assert dcpim.test("is_int", [5.10]) == True
assert dcpim.test("is_int", ["5"]) == True
assert dcpim.test("is_int", ["test"]) == False

# is_float
assert dcpim.test("is_float", [2]) == True
assert dcpim.test("is_float", [2.87]) == True
assert dcpim.test("is_float", ["2.87"]) == True
assert dcpim.test("is_float", ["test"]) == False

# base36
assert dcpim.test("base36", [92837]) == "1ZMT"

# args
assert dcpim.test("args", []) == []

# unixtime2datetime
assert dcpim.test("unixtime2datetime", [1000000]) == "1970-01-12 13:46:40"

# datetime2unixtime
assert dcpim.test("datetime2unixtime", ["1970-01-12 13:46:40"]) == 1000000

# days_since
assert dcpim.test("days_since", ["1970-01-12 13:46:40"]) == 19678

# hashstr
assert dcpim.test("hashstr", [
	"This is a test."
]) == "a8a2f6ebe286697c527eb35a58b5539532e9b3ae3b64d4eb0a46fb657b41562c".upper()

# in_list
assert dcpim.test("in_list", [
	[json_data],
	"name",
	"Hello world"
]) == True

